/**
 * Copyright 2014 Tampere University of Technology, Pori Unit
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package service.tut.pori.contentanalysis;

import java.util.EnumSet;
import java.util.Set;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;

import core.tut.pori.http.parameters.DataGroups;


/**
 * Contains details of a single analysis back-end.
 *
 * <h3>XML Example</h3>
 * 
 * {@doc.restlet service="[service.tut.pori.contentanalysis.reference.Definitions#SERVICE_CA_REFERENCE_EXAMPLE]" method="[service.tut.pori.contentanalysis.Definitions#ELEMENT_BACKEND]" type="GET" query="" body_uri=""}
 *
 */
@XmlRootElement(name=Definitions.ELEMENT_BACKEND)
@XmlAccessorType(XmlAccessType.NONE)
public class AnalysisBackend {
	@XmlElement(name = Definitions.ELEMENT_URL)
	private String _analysisUri = null;
	@XmlElement(name = Definitions.ELEMENT_BACKEND_ID)
	private Integer _backendId = null;
	private EnumSet<Capability> _capabilities = null;
	private DataGroups _defaultTaskDataGroups = null;
	@XmlElement(name = Definitions.ELEMENT_DESCRIPTION)
	private String _description = null;
	@XmlElement(name = Definitions.ELEMENT_ENABLED)
	private Boolean _enabled = null;

	/**
	 * Capability of a back-end.
	 * 
	 */
	public enum Capability{
		/** back-end is capable of processing photo content */
		PHOTO_ANALYSIS(1),
		/** back-end is capable of search/query operations for photos */
		PHOTO_SEARCH(2),
		/** should this back-end receive directly or indirectly generated user feedback */
		USER_FEEDBACK(3),
		/** is this back-end capable of processing tasks without user information */
		ANONYMOUS_TASK(4),
		/** back-end is capable of processing facebook profiles */
		FACEBOOK_SUMMARIZATION(5),
		/** should this back-end receive feedback based on analysis results generated by other back-ends */
		BACKEND_FEEDBACK(6),
		/** back-end is capable of processing twitter profiles */
		TWITTER_SUMMARIZATION(7),
		/** back-end is capable of processing video content */
		VIDEO_ANALYSIS(8),
		/** back-end is capable of search/query operations for videos */
		VIDEO_SEARCH(2);
		
		private int _value;
		
		/**
		 * 
		 * @param value
		 */
		private Capability(int value){
			_value = value;
		}
		
		/**
		 * 
		 * @return Capability as integer
		 */
		public int toInt(){
			return _value;
		}
		
		/**
		 * 
		 * @param value
		 * @return the value converted to Capability
		 * @throws IllegalArgumentException on bad value
		 */
		public static Capability fromInt(int value) throws IllegalArgumentException {
			for(Capability c : Capability.values()){
				if(c._value == value){
					return c;
				}
			}
			throw new IllegalArgumentException("Bad "+Capability.class.toString()+" : "+value);
		}
	}  // enum Capability

	/**
	 * 
	 * @param capabilities
	 */
	public void setCapabilities(EnumSet<Capability> capabilities) {
		_capabilities = capabilities;
	}

	/**
	 * 
	 * @param capability
	 * @return true if the back-end has the given capability
	 */
	public boolean hasCapability(Capability capability){
		if(_capabilities != null){
			return _capabilities.contains(capability);
		}else{
			return false;
		}
	}
	
	/**
	 * 
	 * @param capabilities
	 * @return true if this back-end has all of the given capabilities
	 */
	public boolean hasCapabilities(Set<Capability> capabilities){
		if(capabilities == null || capabilities.isEmpty() || _capabilities == null){
			return false;
		}else{
			return _capabilities.containsAll(capabilities);
		}
	}

	/**
	 * 
	 * @param capability
	 */
	public void addCapability(Capability capability){
		if(_capabilities == null){
			_capabilities = EnumSet.of(capability);
		}else{
			_capabilities.add(capability);
		}
	}

	/**
	 * 
	 * @return back-ends capabilities
	 */
	@XmlElementWrapper(name = Definitions.ELEMENT_CAPABILITY_LIST)
	@XmlElement(name = Definitions.ELEMENT_CAPABILITY)
	public EnumSet<Capability> getCapabilities() {
		return _capabilities;
	}

	/**
	 * 
	 * @return back-end description
	 */
	public String getDescription() {
		return _description;
	}

	/**
	 * 
	 * @param description
	 */
	public void setDescription(String description) {
		_description = description;
	}

	/**
	 * 
	 * @return true if this back-end is enabled
	 */
	public Boolean isEnabled() {
		return _enabled;
	}

	/**
	 * 
	 * @param enabled
	 */
	public void setEnabled(Boolean enabled) {
		_enabled = enabled;
	}

	/**
	 * 
	 * @return the analysis service uri
	 */
	public String getAnalysisUri() {
		return _analysisUri;
	}

	/**
	 * 
	 * @param analysisUri
	 */
	public void setAnalysisUri(String analysisUri) {
		_analysisUri = analysisUri;
	}

	/**
	 * 
	 * @return back-end id
	 */
	public Integer getBackendId() {
		return _backendId;
	}

	/**
	 * 
	 * @param backendId
	 */
	public void setBackendId(Integer backendId) {
		_backendId = backendId;
	}

	/**
	 * @return the defaultTaskDataGroups
	 */
	public DataGroups getDefaultTaskDataGroups() {
		return _defaultTaskDataGroups;
	}

	/**
	 * @param defaultTaskDataGroups the defaultTaskDataGroups to set
	 */
	public void setDefaultTaskDataGroups(DataGroups defaultTaskDataGroups) {
		_defaultTaskDataGroups = defaultTaskDataGroups;
	}
	
	/**
	 * 
	 */
	public AnalysisBackend(){
		// nothing needed
	}
	
	/**
	 * 
	 * @param backendId
	 */
	public AnalysisBackend(Integer backendId){
		_backendId = backendId;
	}
}
