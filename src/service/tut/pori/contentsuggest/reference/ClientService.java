/**
 * Copyright 2015 Tampere University of Technology, Pori Unit
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package service.tut.pori.contentsuggest.reference;

import service.tut.pori.contentsuggest.Definitions;
import core.tut.pori.http.Response;
import core.tut.pori.http.annotations.HTTPAuthenticationParameter;
import core.tut.pori.http.annotations.HTTPMethodParameter;
import core.tut.pori.http.annotations.HTTPService;
import core.tut.pori.http.annotations.HTTPServiceMethod;
import core.tut.pori.http.parameters.AuthenticationParameter;
import core.tut.pori.http.parameters.DataGroups;
import core.tut.pori.http.parameters.Limits;
import core.tut.pori.http.parameters.StringParameter;

/**
 * Reference implementation for client API methods.
 * 
 * <h1>Implementation Service path {@value service.tut.pori.contentsuggest.Definitions#SERVICE_CS}</h1>
 * 
 * @see service.tut.pori.contentsuggest.ContentSuggestService
 */
@HTTPService(name = service.tut.pori.contentsuggest.reference.Definitions.SERVICE_CS_REFERENCE_CLIENT)
public class ClientService {
	/**
	 * This method is for retrieving a list of suggestions based on the indexed data of the user. The data can include content be generated by any back-end, by the authenticated user, and can also include public content created by other users.
	 * 
	 * This method can be used to provide general content suggestions, or it can be used to implement auto-complete functionality to be used, for example, with search fields in web applications.
	 * 
	 * <h2>Example Query:</h2>
	 *
	 * GET /rest/{@value service.tut.pori.contentsuggest.reference.Definitions#SERVICE_CS_REFERENCE_CLIENT}/{@value service.tut.pori.contentsuggest.Definitions#METHOD_SUGGEST}?{@value service.tut.pori.contentsuggest.Definitions#PARAMETER_QUERY}=peter<br>
	 *
	 * <h2>Example Result:</h2>
	 * 
	 * {@doc.restlet service="[service.tut.pori.contentsuggest.reference.Definitions#SERVICE_CS_REFERENCE_CLIENT]" method="[service.tut.pori.contentsuggest.Definitions#METHOD_SUGGEST]" type="GET" query="[service.tut.pori.contentsuggest.Definitions#PARAMETER_QUERY]=peter" body_uri=""}
	 * 
	 * @param authenticatedUser Note: this method requires authentication, but for the reference implementation, anonymous access is granted.
	 * @param dataGroups filters based on {@link service.tut.pori.contentanalysis.MediaObject.MediaObjectType}. Applicable values are {@value service.tut.pori.contentanalysis.Definitions#DATA_GROUP_FACE}, {@value service.tut.pori.contentanalysis.Definitions#DATA_GROUP_KEYWORDS}, {@value service.tut.pori.contentanalysis.Definitions#DATA_GROUP_METADATA} and {@value service.tut.pori.contentanalysis.Definitions#DATA_GROUP_OBJECT}.
	 * @param query The query string for a suggestion. The query string is tokenized with character "{@value service.tut.pori.contentsuggest.Definitions#QUERY_SEPARATOR}", and the last token is sent to the suggestion back-end. 
	 * @param limits paging limits
	 * @return See {@link service.tut.pori.contentsuggest.AutoCompleteResult}
	 */
	@HTTPServiceMethod(name = Definitions.METHOD_SUGGEST, acceptedMethods={core.tut.pori.http.Definitions.METHOD_GET})
	public Response suggest(
			@HTTPAuthenticationParameter(required=false) AuthenticationParameter authenticatedUser,
			@HTTPMethodParameter(name = DataGroups.PARAMETER_DEFAULT_NAME, required = false) DataGroups dataGroups,
			@HTTPMethodParameter(name = Definitions.PARAMETER_QUERY, required = true) StringParameter query,
			@HTTPMethodParameter(name = Limits.PARAMETER_DEFAULT_NAME, required = false, defaultValue=Definitions.DEFAULT_LIMITS) Limits limits)
	{
		return new Response(ContentSuggestReferenceCore.suggest(authenticatedUser.getUserIdentity(), dataGroups, limits, query.getValue()));
	}
}
